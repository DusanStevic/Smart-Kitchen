package drools.spring.rules;

import rs.ac.uns.ftn.backend.model.Rating;
import rs.ac.uns.ftn.backend.model.Recipe;
import java.math.RoundingMode;
import java.text.DecimalFormat;

global DecimalFormat rounding;

/*can not operate with null values*/

rule "Set frequency1 to 0"
    when
        $recipe: Recipe(getRating().getFrequency1() == null)
    then
    	// Set frequency1 to 0
    	modify($recipe) { 
    		 getRating().setFrequency1(0)
    	}    
end

rule "Set frequency2 to 0"
    when
        $recipe: Recipe(getRating().getFrequency2() == null)
    then
    	// Set frequency2 to 0
    	modify($recipe) { 
    		 getRating().setFrequency2(0)
    	}    
end


rule "Set frequency3 to 0"
    when
        $recipe: Recipe(getRating().getFrequency3() == null)
    then
    	// Set frequency3 to 0
    	modify($recipe) { 
    		 getRating().setFrequency3(0)
    	}    
end


rule "Set frequency4 to 0"
    when
        $recipe: Recipe(getRating().getFrequency4() == null)
    then
    	// Set frequency4 to 0
    	modify($recipe) { 
    		 getRating().setFrequency4(0)
    	}    
end


rule "Set frequency5 to 0"
    when
        $recipe: Recipe(getRating().getFrequency5() == null)
    then
    	// Set frequency5 to 0
    	modify($recipe) { 
    		 getRating().setFrequency5(0)
    	}    
end


rule "Set like frequency to 0"
    when
        $recipe: Recipe(getRating().getFrequencyLike() == null)
    then
    	// Set like frequency to 0
    	modify($recipe) { 
    		 getRating().setFrequencyLike(0);
    	}    
end

rule "Set dislike frequency to 0"
    when
        $recipe: Recipe(getRating().getFrequencyDislike() == null)
    then
    	// Set dislike frequency to 0
    	modify($recipe) { 
    		 getRating().setFrequencyDislike(0);
    	}    
end

/*must cover edge cases between f1f2f3f4f5=00000 and f1f2f3f4f5=11111
32 possible Binary combinations for 5 digits
0   0   0   0   0   00000=0
0   0   0   0   1   00001=1
0   0   0   1   0   00010=2
0   0   0   1   1   00011=3
0   0   1   0   0   00100=4
0   0   1   0   1   00101=5
0   0   1   1   0   00110=6
0   0   1   1   1   00111=7
0   1   0   0   0   01000=8
0   1   0   0   1   01001=9
0   1   0   1   0   01010=10
0   1   0   1   1   01011=11
0   1   1   0   0   01100=12
0   1   1   0   1   01101=13
0   1   1   1   0   01110=14
0   1   1   1   1   01111=15
1   0   0   0   0   10000=16
1   0   0   0   1   10001=17
1   0   0   1   0   10010=18
1   0   0   1   1   10011=19
1   0   1   0   0   10100=20
1   0   1   0   1   10101=21
1   0   1   1   0   10110=22
1   0   1   1   1   10111=23
1   1   0   0   0   11000=24
1   1   0   0   1   11001=25
1   1   0   1   0   11010=26
1   1   0   1   1   11011=27
1   1   1   0   0   11100=28
1   1   1   0   1   11101=29
1   1   1   1   0   11110=30
1   1   1   1   1   11111=31
*/

/*Grade rules*/

rule "Calculate average grade when all frequencies are 0 f1f2f3f4f5=00000=0"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() == 0)
    then
    	// dividing by zero
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)0)));
    	}      
end

rule "Calculate average grade when f1f2f3f4f5=00001=1"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5()))));
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=00010=2"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=00011=3"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=00100=4"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=00101=5"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=00110=6"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=00111=7"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=01000=8"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=01001=9"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=01010=10"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=01011=11"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=01100=12"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=01101=13"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=01110=14"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=01111=15"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() == 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=10000=16"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=10001=17"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=10010=18"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=10011=19"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=10100=20"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=10101=21"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=10110=22"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=10111=23"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() == 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=11000=24"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=11001=25"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=11010=26"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=11011=27"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() == 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=11100=28"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=11101=29"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() == 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when f1f2f3f4f5=11110=30"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() == 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	} 
end

rule "Calculate average grade when all frequencies are not 0 f1f2f3f4f5=11111=31"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequency1() != 0 && 
        getRating().getFrequency2() != 0 && 
        getRating().getFrequency3() != 0 && 
        getRating().getFrequency4() != 0 && 
        getRating().getFrequency5() != 0)
    then
    	// weighted average = sum(grade * grade frequency)/total number of grades
    	modify($recipe) { 
    		 getRating().setAverageGrade(Double.parseDouble(rounding.format((double)(1*$recipe.getRating().getFrequency1()+2*$recipe.getRating().getFrequency2()+3*$recipe.getRating().getFrequency3()+4*$recipe.getRating().getFrequency4()+5*$recipe.getRating().getFrequency5())/($recipe.getRating().getFrequency1()+$recipe.getRating().getFrequency2()+$recipe.getRating().getFrequency3()+$recipe.getRating().getFrequency4()+$recipe.getRating().getFrequency5())))); 
    	}     
end

/*Like rules*/

rule "Calculate like-dislike ratio when all values are 0 like-dislike=ld=00=0 "
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequencyLike() == 0 && 
        getRating().getFrequencyDislike() == 0)
    then
    	// dividing by zero
    	modify($recipe) { 
    		getRating().setLikeDislikeRatio(Double.parseDouble(rounding.format((double)0*100)));
    	}    
end

rule "Calculate like dislike ratio like-dislike=ld=01=1"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequencyLike() == 0 && 
        getRating().getFrequencyDislike() != 0)
    then
        
    	// ratio = 0 / number of dislikes = 0 = 0 %
    	modify($recipe) { 
    		getRating().setLikeDislikeRatio(Double.parseDouble(rounding.format((double)0*100)));	
    	}
end

rule "Calculate like dislike ratio like-dislike=ld=10=2"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequencyLike() != 0 && 
        getRating().getFrequencyDislike() == 0)
    then
        
    	// ratio = number of likes / number of likes = 1 = 100%
    	modify($recipe) { 
    		getRating().setLikeDislikeRatio(Double.parseDouble(rounding.format((double)1*100)));      		
    	}
end

rule "Calculate like dislike ratio like-dislike=11=3"
	lock-on-active true
    when
        $recipe: Recipe(
        getRating().getFrequencyLike() != 0 && 
        getRating().getFrequencyDislike() != 0)
    then
        
    	// ratio = number of likes / (number of likes + number of dislikes)  0% < ratio < 100%
    	modify($recipe) { 
    		getRating().setLikeDislikeRatio(Double.parseDouble(rounding.format((double)100*$recipe.getRating().getFrequencyLike()/($recipe.getRating().getFrequencyLike()+$recipe.getRating().getFrequencyDislike()))));   
    	}
end