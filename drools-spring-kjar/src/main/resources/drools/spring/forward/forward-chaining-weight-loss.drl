package drools.spring.forward;

import rs.ac.uns.ftn.backend.model.*;
import rs.ac.uns.ftn.backend.model.enumeration.RecipeDifficultyLevels;

query calculateTotalCaloriesInRecipe(Recipe recipe, Number $totalCalories)
	$totalCalories:= Number() from accumulate (
		RecipeItem($amount: amount,$caloriesPerUnit:ingredient.caloriesPerUnit) from recipe.getRecipeItems(),
		sum($amount*$caloriesPerUnit));
end;

rule "Recipe difficulty"
    when
        $recipe: Recipe(difficulty == null, preparationTime > 100)
    then
    	System.out.println("Recipe difficulty rule");
    	modify($recipe) {setDifficulty(RecipeDifficultyLevels.HARD)}
        
end

rule "Calculate total calories in recipe"
    when
        $recipe: Recipe(difficulty == RecipeDifficultyLevels.HARD, totalCalories == null)
		calculateTotalCaloriesInRecipe($recipe, $totalCalories;);
    then

    	System.out.println("Calculate total calories in recipe");
       	modify($recipe) { setTotalCalories(Double.valueOf($totalCalories.toString())) }
end

rule "Deactivate high calorie recipes (weight loss)"
    when
        $recipe: Recipe(totalCalories > 10000)
    then
    	System.out.println("Deactivate high calorie recipes (weight loss)");
       	modify($recipe) { setActive(false) }
end

